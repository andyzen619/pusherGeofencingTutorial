{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\n/* pages/index.js */\nimport React, { Component, Fragment } from \"react\";\nimport axios from \"axios\";\nimport Pusher from \"pusher-js\";\nimport Layout from \"../componenets/Layout\";\nimport ChoosePersona from \"../componenets/ChoosePersona\";\nimport Map from '../components/Map';\nimport NearbyFriends from '../components/NearbyFriends';\n\nclass IndexPage extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      id: null,\n      people: []\n    });\n\n    _defineProperty(this, \"endConnection\", () => {\n      this.pusher.disconnect();\n      axios.post(`/offline/${this.state.id}`);\n    });\n\n    _defineProperty(this, \"personaSelected\", id => {\n      this.setState({\n        id\n      });\n      axios.post(`/online/${id}`);\n    });\n  }\n\n  /**\n   * *Life cycle method\n   * Sets up subscription to pusher map-geofencing channel\n   */\n  componentWillMount() {\n    this.pusher = new Pusher(process.env.PUSHER_APP_KEY, {\n      cluster: process.env.PUSHER_APP_CLUSTER,\n      encrypted: true\n    });\n    this.channel = this.pusher.subscribe(\"map-geofencing\");\n  }\n  /**\n   * *Life cycle methode\n   * Makes req to people route and set the state\n   */\n\n\n  componentDidMount() {\n    axios.get(\"/people\").then(({\n      data\n    }) => {\n      const {\n        people = []\n      } = data;\n      this.setState({\n        people\n      });\n    });\n    window.onbeforeunload = this.endConnection;\n  }\n\n  componentWillUnmount() {\n    this.endConnection();\n  }\n  /**\n   * Sends online request to activate user :id\n   */\n\n\n  render() {\n    const {\n      id,\n      people\n    } = this.state;\n    const person = people.find(person => person.id === id) || {};\n    const peopleOffline = people.filter(person => !person.online);\n    return __jsx(Layout, {\n      pageTitle: \"Realtime Geofencing\"\n    }, __jsx(\"main\", {\n      className: \"container-fluid position-absolute h-100 bg-light\"\n    }, id ? __jsx(\"div\", {\n      className: \"row position-absolute w-100 h-100\"\n    }) : __jsx(ChoosePersona, {\n      count: 5,\n      people: peopleOffline,\n      onSelected: this.personaSelected\n    })));\n  }\n\n}\n\nexport default (() => __jsx(IndexPage, null));","map":{"version":3,"sources":["/home/aliang/lighthouse/practice/pusherGeofencingTutorial/pages/index.js"],"names":["React","Component","Fragment","axios","Pusher","Layout","ChoosePersona","Map","NearbyFriends","IndexPage","id","people","pusher","disconnect","post","state","setState","componentWillMount","process","env","PUSHER_APP_KEY","cluster","PUSHER_APP_CLUSTER","encrypted","channel","subscribe","componentDidMount","get","then","data","window","onbeforeunload","endConnection","componentWillUnmount","render","person","find","peopleOffline","filter","online","personaSelected"],"mappings":";;;AAAA;AAEA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,OAAOC,MAAP,MAAmB,uBAAnB;AACA,OAAOC,aAAP,MAA0B,8BAA1B;AACA,OAAOC,GAAP,MAAgB,mBAAhB;AACA,OAAOC,aAAP,MAA0B,6BAA1B;;AAEA,MAAMC,SAAN,SAAwBR,SAAxB,CAAkC;AAAA;AAAA;;AAAA,mCACxB;AAAES,MAAAA,EAAE,EAAE,IAAN;AAAYC,MAAAA,MAAM,EAAE;AAApB,KADwB;;AAAA,2CAMhB,MAAM;AACpB,WAAKC,MAAL,CAAYC,UAAZ;AACAV,MAAAA,KAAK,CAACW,IAAN,CAAY,YAAW,KAAKC,KAAL,CAAWL,EAAG,EAArC;AACD,KAT+B;;AAAA,6CA4CdA,EAAE,IAAI;AACtB,WAAKM,QAAL,CAAc;AAAEN,QAAAA;AAAF,OAAd;AACAP,MAAAA,KAAK,CAACW,IAAN,CAAY,WAAUJ,EAAG,EAAzB;AACD,KA/C+B;AAAA;;AAWhC;;;;AAIAO,EAAAA,kBAAkB,GAAG;AACnB,SAAKL,MAAL,GAAc,IAAIR,MAAJ,CAAWc,OAAO,CAACC,GAAR,CAAYC,cAAvB,EAAuC;AACnDC,MAAAA,OAAO,EAAEH,OAAO,CAACC,GAAR,CAAYG,kBAD8B;AAEnDC,MAAAA,SAAS,EAAE;AAFwC,KAAvC,CAAd;AAKA,SAAKC,OAAL,GAAe,KAAKZ,MAAL,CAAYa,SAAZ,CAAsB,gBAAtB,CAAf;AACD;AAED;;;;;;AAIAC,EAAAA,iBAAiB,GAAG;AAClBvB,IAAAA,KAAK,CAACwB,GAAN,CAAU,SAAV,EAAqBC,IAArB,CAA0B,CAAC;AAAEC,MAAAA;AAAF,KAAD,KAAc;AACtC,YAAM;AAAElB,QAAAA,MAAM,GAAG;AAAX,UAAkBkB,IAAxB;AACA,WAAKb,QAAL,CAAc;AAAEL,QAAAA;AAAF,OAAd;AACD,KAHD;AAKAmB,IAAAA,MAAM,CAACC,cAAP,GAAwB,KAAKC,aAA7B;AACD;;AAEDC,EAAAA,oBAAoB,GAAG;AACrB,SAAKD,aAAL;AACD;AAED;;;;;AAQAE,EAAAA,MAAM,GAAG;AACP,UAAM;AAAExB,MAAAA,EAAF;AAAMC,MAAAA;AAAN,QAAiB,KAAKI,KAA5B;AACA,UAAMoB,MAAM,GAAGxB,MAAM,CAACyB,IAAP,CAAYD,MAAM,IAAIA,MAAM,CAACzB,EAAP,KAAcA,EAApC,KAA2C,EAA1D;AACA,UAAM2B,aAAa,GAAG1B,MAAM,CAAC2B,MAAP,CAAcH,MAAM,IAAI,CAACA,MAAM,CAACI,MAAhC,CAAtB;AAEA,WACE,MAAC,MAAD;AAAQ,MAAA,SAAS,EAAC;AAAlB,OACE;AAAM,MAAA,SAAS,EAAC;AAAhB,OACG7B,EAAE,GACD;AAAK,MAAA,SAAS,EAAC;AAAf,MADC,GAGD,MAAC,aAAD;AACE,MAAA,KAAK,EAAE,CADT;AAEE,MAAA,MAAM,EAAE2B,aAFV;AAGE,MAAA,UAAU,EAAE,KAAKG;AAHnB,MAJJ,CADF,CADF;AAeD;;AArE+B;;AAwElC,gBAAe,MAAM,MAAC,SAAD,OAArB","sourcesContent":["/* pages/index.js */\n\nimport React, { Component, Fragment } from \"react\";\nimport axios from \"axios\";\nimport Pusher from \"pusher-js\";\nimport Layout from \"../componenets/Layout\";\nimport ChoosePersona from \"../componenets/ChoosePersona\";\nimport Map from '../components/Map';\nimport NearbyFriends from '../components/NearbyFriends';\n\nclass IndexPage extends Component {\n  state = { id: null, people: [] };\n\n  /**\n   * Ends pusher connection and and sends a /offline req to server for the current user\n   */\n  endConnection = () => {\n    this.pusher.disconnect();\n    axios.post(`/offline/${this.state.id}`);\n  };\n\n  /**\n   * *Life cycle method\n   * Sets up subscription to pusher map-geofencing channel\n   */\n  componentWillMount() {\n    this.pusher = new Pusher(process.env.PUSHER_APP_KEY, {\n      cluster: process.env.PUSHER_APP_CLUSTER,\n      encrypted: true\n    });\n\n    this.channel = this.pusher.subscribe(\"map-geofencing\");\n  }\n\n  /**\n   * *Life cycle methode\n   * Makes req to people route and set the state\n   */\n  componentDidMount() {\n    axios.get(\"/people\").then(({ data }) => {\n      const { people = [] } = data;\n      this.setState({ people });\n    });\n\n    window.onbeforeunload = this.endConnection;\n  }\n\n  componentWillUnmount() {\n    this.endConnection();\n  }\n\n  /**\n   * Sends online request to activate user :id\n   */\n  personaSelected = id => {\n    this.setState({ id });\n    axios.post(`/online/${id}`);\n  };\n\n  render() {\n    const { id, people } = this.state;\n    const person = people.find(person => person.id === id) || {};\n    const peopleOffline = people.filter(person => !person.online);\n\n    return (\n      <Layout pageTitle=\"Realtime Geofencing\">\n        <main className=\"container-fluid position-absolute h-100 bg-light\">\n          {id ? (\n            <div className=\"row position-absolute w-100 h-100\"></div>\n          ) : (\n            <ChoosePersona\n              count={5}\n              people={peopleOffline}\n              onSelected={this.personaSelected}\n            />\n          )}\n        </main>\n      </Layout>\n    );\n  }\n}\n\nexport default () => <IndexPage />;\n"]},"metadata":{},"sourceType":"module"}